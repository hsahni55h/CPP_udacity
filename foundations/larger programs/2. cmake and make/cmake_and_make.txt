Object Files
So far, we have refered to running g++ as "compiling".

However, g++ performs several distinct tasks:

1. The preprocessor runs and executes any statement beginning with a hash symbol: #. 
This takes care of any #include statements, for example, so that all code is in place and ready to compile.

2. Each file in the source code is compiled into an "object file" (a .o file). 
Object files are platform-specific machine code that will be used to create an executable.

3. The object files are "linked" together to make a single executable. 
In the examples you have seen so far, this executable is a.out, but you can specify whatever name you want.
It is possible to have g++ perform each of the steps separately by using the -c flag. For example,

g++ -c main.cpp
will produce a main.o file, and that file can be converted to an executable with

g++ main.o



Building a file:
1. g++ -c *.cpp         you compiled a single source code file to an object file
2. g++ *.o              object file was then converted into an executable.
3. ./a.out


For larger projects, it is helpful to use a build system which can compile the right files for you and take care of linking.

CMake is an open-source, platform-independent build system. 
CMake uses text documents, labeled as CMakeLists.txt files, to manage platform-specific build environments, like make.

CMakeList.txt files have a hierarchical structure, and one CMakeList.txt file can be included in each directory of the project. 
These files can be used to specify the locations of necessary packages, set build flags and environment variables, specify build target names and locations, and other actions.

The first line directs the cmake command at the top-level CMakeLists.txt file with ... 
This command uses the top-level CMakeLists.txt to configure the project and create a Makefile. 
In the second line, make finds the Makefile and uses the instructions in the Makefile to build the project.

In general, CMake only needs to be run once for a project, unless you are changing build options (e.g. using different build flags). 
Make will be able to keep track of which files have changed and compile only those that need to be before building.